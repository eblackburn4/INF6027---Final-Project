type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_mhal, res=TRUE, col=2, lwd=3)
m_mhal <- lm(avg_mahal_dist ~ release_year, data = segment_all)
lm_mhal <- lm(avg_mahal_dist ~ release_year, data = segment_all)
seg_model_mhal <- segmented(lm_mhal, seg.Z = ~release_year,
npsi = ifelse(segtest_mhal$selection.psi$npsi > 0, segtest_mhal$selection.psi$npsi, 1))
params_mhal <- summary(seg_model_mhal)
View(params_mhal)
segment_all$fitted_values_mhal <- if (segtest_mhal$selection.psi$npsi > 0) {
fitted(seg_model_mhal)
} else {
fitted(lm_mhal)
}
ggplot(segment_all, aes(x = release_year, y = avg_mahal_dist)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values_mhal), size = 1,
color = ifelse(segtest_mhal$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed")  +
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
View(params_all)
print(params_all)
print(params_mhal)
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score,
Kmax=5,
alpha = 0.01,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
View(avg_sentiment_year_per_song_afinn)
ggplot(avg_sentiment_year_per_song_afinn, aes(x = release_year, y = sentiment_score_year)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values_lyrics), size = 1,
color = ifelse(segtest_euc$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed")  +
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score,
Kmax=5,
alpha = 0.01,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=5,
alpha = 0.01,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
seg_model_lyrics <- segmented(lm_lyrics, seg.Z = ~release_year,
npsi = ifelse(segtest_lyrics$selection.psi$npsi > 0, segtest_lyrics$selection.psi$npsi, 1))
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=5,
alpha = 0.05,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
segtest_mhal <- selgmented(segment_all$avg_mahal_dist,
Kmax=5,
alpha = 0.05,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
lm_lyrics <- lm(sentiment_score_year ~ release_year, data = avg_sentiment_year_per_song_afinn)
seg_model_lyrics <- segmented(lm_lyrics, seg.Z = ~release_year,
npsi = ifelse(segtest_lyrics$selection.psi$npsi > 0, segtest_lyrics$selection.psi$npsi, 1))
lyric_params <- summary(seg_model_lyrics)
avg_sentiment_year_per_song_afinn$fitted_values_lyrics <- if (segtest_lyrics$selection.psi$npsi > 0) {
fitted(seg_model_lyrics)
} else {
fitted(lm_lyrics)
}
ggplot(avg_sentiment_year_per_song_afinn, aes(x = release_year, y = sentiment_score_year)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values_lyrics), size = 1,
color = ifelse(segtest_lyrics$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed")  +
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
ggplot(avg_sentiment_year_per_song_afinn, aes(x = release_year, y = sentiment_score_year)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values_lyrics), size = 1,
color = ifelse(segtest_lyrics$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed")  +
labs(
x = "Release Year",
y = "Average Value"
) +
theme(
axis.title.x = element_text(vjust = 2),
axis.title.y = element_text(vjust = -2),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc(grid = 'XY', axis_title_size = 12) +
scale_x_continuous(breaks = breaks_pretty(5))
ggplot(avg_sentiment_year_per_song_afinn, aes(x = release_year, y = sentiment_score_year)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values_lyrics), size = 1,
color = ifelse(segtest_lyrics$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed")  +
labs(
x = "Release Year",
y = "Average Value"
) +
theme(
axis.title.x = element_text(vjust = -2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc(grid = 'XY', axis_title_size = 12) +
scale_x_continuous(breaks = breaks_pretty(5))
ggplot(avg_sentiment_year_per_song_afinn, aes(x = release_year, y = sentiment_score_year)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values_lyrics), size = 1,
color = ifelse(segtest_lyrics$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed")  +
labs(
x = "Release Year",
y = "Average Value"
) +
theme_ipsum_rc(grid = 'XY', axis_title_size = 12) +
theme(
axis.title.x = element_text(vjust = -2),
axis.title.y = element_text(vjust = 2),
axis.text = element_text(size = 10)
) +
scale_x_continuous(breaks = breaks_pretty(5))
View(lyric_params)
print(lyrics_params)
print(lyric_params)
lyrics_confint <- confint(seg_model_lyrics, parm = "psi")
View(genre_summary)
View(lyric_params)
?confint.segmented
confint(seg_model_lyrics)
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.05,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_euc$selection.psi$npsi > 0, segtest_euc$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
#plot the fitted segmented model
ggplot(segment_feature, aes(x = release_year, y = yearly_avg)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +
geom_line(aes(y = fitted_values), size = 1, color = ifelse(segtest_feature$selection.psi$npsi > 0, '#21918c','black')) +
geom_vline(xintercept = 1991, linetype = "dashed") +
labs(
title = str_to_title(feature_name),
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 12),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc(grid = 'XY') +
scale_x_continuous(breaks = breaks_pretty(5))
}
loudness_seg <- segment_feature_func('loudness')
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=5,
alpha = 0.05,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=5,
alpha = 0.05,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
#building the segmented model using the automatically-determined changepoints and summarise the coefficients
lm_lyrics <- lm(sentiment_score_year ~ release_year, data = avg_sentiment_year_per_song_afinn)
seg_model_lyrics <- segmented(lm_lyrics, seg.Z = ~release_year,
npsi = ifelse(segtest_lyrics$selection.psi$npsi > 0, segtest_lyrics$selection.psi$npsi, 1))
lyric_params <- summary(seg_model_lyrics)
#print confidence intervals for breakpoints
#add fitted values to original data for plotting. If no segments, use the lm fit instead
avg_sentiment_year_per_song_afinn$fitted_values_lyrics <- if (segtest_lyrics$selection.psi$npsi > 0) {
fitted(seg_model_lyrics)
} else {
fitted(lm_lyrics)
}
View(song_features_long_all)
loudness_seg <- segment_feature_func('Loudness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.05,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_euc$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
}
loudness_seg <- segment_feature_func('Loudness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.05,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
}
loudness_seg <- segment_feature_func('Loudness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.025,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
}
loudness_seg <- segment_feature_func('Loudness')
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=5,
alpha = 0.025,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
seg_model_lyrics <- segmented(lm_lyrics, seg.Z = ~release_year,
npsi = ifelse(segtest_lyrics$selection.psi$npsi > 0, segtest_lyrics$selection.psi$npsi, 1))
lyric_params <- summary(seg_model_lyrics)
#add fitted values to original data for plotting. If no segments, use the lm fit instead
avg_sentiment_year_per_song_afinn$fitted_values_lyrics <- if (segtest_lyrics$selection.psi$npsi > 0) {
fitted(seg_model_lyrics)
} else {
fitted(lm_lyrics)
}
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.01,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
loudness_seg <- segment_feature_func('Loudness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.01,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
}
loudness_seg <- segment_feature_func('Loudness')
confint_mhal <- confint(seg_model_mhal)
View(confint_mhal)
plot(segtest_mhal, res=TRUE, col=2, lwd=3)
confint_all <- confint(seg_model_all)
View(confint_all)
# changepoints: individual features ---------------------------------------
#same thing as before but wrapped in a function to easily generate changepoint analysis for each individual feature
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.01,
Kmax=5,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
print(confint(seg_mod_feature))
}
loudness_seg <- segment_feature_func('Loudness')
acousticness_seg <- segment_feature_func('Acousticness')
energy_seg <- segment_feature_func('Energy')
acousticness_seg <- segment_feature_func('Acousticness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.01,
Kmax=2,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
print(confint(seg_mod_feature))
}
acousticness_seg <- segment_feature_func('Acousticness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.01,
Kmax=3,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
print(confint(seg_mod_feature))
}
acousticness_seg <- segment_feature_func('Acousticness')
segment_feature_func <- function(feature_name) {
segment_feature <- song_features_long_all |>
filter(feature == feature_name) |>
select(!feature)
segtest_feature <- selgmented(segment_feature$yearly_avg,
alpha = 0.01,
Kmax=2,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_feature, res=TRUE, col=2, lwd=3)
lm_feature <- lm(yearly_avg ~ release_year, data = segment_feature)
seg_mod_feature <- segmented(lm_feature, seg.Z = ~release_year,
npsi = ifelse(segtest_feature$selection.psi$npsi > 0, segtest_feature$selection.psi$npsi, 1))
segment_feature$fitted_values <- if (segtest_feature$selection.psi$npsi > 0) {
fitted(seg_mod_feature)
} else {
fitted(lm_feature)
}
print(summary(seg_mod_feature))
print(confint(seg_mod_feature))
}
acousticness_seg <- segment_feature_func('Acousticness')
danceability_seg <- segment_feature_func('Danceability')
energy_seg <- segment_feature_func('Energy')
instrumentalness_seg <- segment_feature_func('Instrumentalness')
liveness_seg <- segment_feature_func('Liveness')
loudness_seg <- segment_feature_func('Loudness')
View(loudness_seg)
speechiness_seg <- segment_feature_func('Speechiness')
tempo_seg <- segment_feature_func('Tempo')
valence_seg <- segment_feature_func('Valence')
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=2,
alpha = 0.05,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
#building the segmented model using the automatically-determined changepoints and summarise the coefficients
lm_lyrics <- lm(sentiment_score_year ~ release_year, data = avg_sentiment_year_per_song_afinn)
seg_model_lyrics <- segmented(lm_lyrics, seg.Z = ~release_year,
npsi = ifelse(segtest_lyrics$selection.psi$npsi > 0, segtest_lyrics$selection.psi$npsi, 1))
lyric_params <- summary(seg_model_lyrics)
#get confidence intervals for breakpoints
confint_lyrics <- confint(seg_model_lyrics)
#add fitted values to original data for plotting. If no segments, use the lm fit instead
avg_sentiment_year_per_song_afinn$fitted_values_lyrics <- if (segtest_lyrics$selection.psi$npsi > 0) {
fitted(seg_model_lyrics)
} else {
fitted(lm_lyrics)
}
View(confint_lyrics)
View(effsize_lyrics)
confint_lyrics
summary(seg_model_lyrics)
danceability_seg <- segment_feature_func('Danceability')
acousticness_seg <- segment_feature_func('Acousticness')
energy_seg <- segment_feature_func('Energy')
instrumentalness_seg <- segment_feature_func('Instrumentalness')
instrumentalness_seg <- segment_feature_func('Instrumentalness')
loudness_seg <- segment_feature_func('Loudness')
speechiness_seg <- segment_feature_func('Speechiness')
tempo_seg <- segment_feature_func('Tempo')
valence_seg <- segment_feature_func('Valence')
segtest_lyrics <- selgmented(avg_sentiment_year_per_song_afinn$sentiment_score_year,
Kmax=2,
alpha = 0.05,
type='aic',
plot.ic=TRUE,
check.dslope = TRUE)
plot(segtest_lyrics, res=TRUE, col=2, lwd=3)
