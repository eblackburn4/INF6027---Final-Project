pivot_longer(
cols = c(acousticness, danceability, energy, instrumentalness, liveness, loudness, speechiness, valence),
names_to = "Feature",
values_to = "Value"
)
ggplot(song_features_long_era, aes(x = Feature, y = Value, fill = era)) +
geom_boxplot(
position = position_dodge(width = 0.8),
alpha = 0.7,
outlier.shape = 16,
outlier.size = 0
) +
stat_summary(
fun = median,
geom = "point",
shape = 18,
size = 3,
color = "black",
position = position_dodge(width = 0.8)
) +
scale_fill_viridis_d(option = "D") +
labs(
title = "Distribution of Musical Features by Era with Pairwise Significance",
x = "Musical Features",
y = "Value",
fill = "Era"
) +
theme_ipsum_rc(grid = 'XY') +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12)
)
#pairwise signifiance tests for differences of means for each feature in each era and calculate effect sizes
pairwise_tests <- song_features_long_era |>
group_by(Feature) |>
wilcox_test(Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance() |>  # Add significance labels
effect_sizes <- song_features_long_era |>
group_by(Feature) |>
wilcox_effsize(Value ~ era)
pairwise_tests <- song_features_long_era |>
group_by(Feature) |>
wilcox_test(Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance()  # Add significance labels
## Author: Ned Blackburn
## Date Created: 2024-11-27
options(scipen = 6, digits = 5)
library(tidyverse)
library(hrbrthemes)
library(GGally)
library(ggfortify)
library(tidytext)
library(textdata)
library(scico)
library(rstatix)
library(coin)
library(mcp)
pairwise_tests <- song_features_long_era |>
group_by(Feature) |>
wilcox_test(Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance()  # Add significance labels
pairwise_tests <- song_features_long_era |>
group_by(Feature) |>
wilcox_test(Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance()  # Add significance labels
pairwise_tests <- song_features_long_era |>
group_by(Feature) |>
wilcox_test(Value ~ era, paired = FALSE)
View(song_features_long_era)
pairwise_tests <- song_features_long_era |>
wilcox_test(Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance()
pairwise_tests <- wilcox_test(data = song_features_long_era, Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance()
View(pairwise_tests)
pairwise_tests <- song_features_long_era |>
group_by(Feature) |>
rstatix::wilcox_test(Value ~ era, paired = FALSE) |>  # Perform Wilcoxon test
add_significance()  # Add significance labels
effect_sizes <- song_features_long_era |>
group_by(Feature) |>
wilcox_effsize(Value ~ era)
View(effect_sizes)
View(song_features)
View(song_features_long_all)
test <- song_features_long_all |>
filter(feature == 'loudness')
View(test)
rm(test)
song_features_long_all |>
filter(feature == 'loudness') |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_line()
song_features_long_all |>
filter(feature == 'loudness') |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_point()
model = list(
yearly_average ~ 0 + release_year,  ~ 0 + release_year)
testdat < - song_features_long_all |>
filter(feature == 'loudness') |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_point()
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_point()
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!= feature) >
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature) |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_point()
model = list(
yearly_average ~ 0 + release_year,  ~ 0 + release_year)
fit = mcp(model, testdat, par_x = "dates")
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature) |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_point()
View(testdat)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
ggplot(aes(x = release_year, y = yearly_avg)) +
geom_point()
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
model = list(
yearly_average ~ 0 + release_year,  ~ 0 + release_year)
fit = mcp(model, testdat, par_x = "dates")
model = list(
yearly_avg ~ 0 + release_year,  ~ 0 + release_year)
fit = mcp(model, testdat, par_x = "dates")
model = list(
yearly_avg ~ 0 + release_year,  ~ 0 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
model = list(
yearly_avg ~ 0 + release_year,  ~ 0 + release_year, ~0 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
testdat <- song_features_long_all |>
filter(feature == 'instrumentalness') |>
select(!feature)
model = list(
yearly_avg ~ 0 + release_year,  ~ 0 + release_year, ~0 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
testdat <- song_features_long_all |>
filter(feature == 'speechiness') |>
select(!feature)
model = list(
yearly_avg ~ 0 + release_year,  ~ 0 + release_year, ~0 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
model = list(
yearly_avg ~ 0 + release_year,  ~ 0 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic()
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'speechiness') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'valence') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'danceability') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'acousticness') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'liveness') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'instrumentalness') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
model = list(
yearly_avg ~ 1 + release_year ,~1 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'valence') |>
select(!feature)
model = list(
yearly_avg ~ 1 + release_year ,~1 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'valence') |>
select(!feature)
model = list(
yearly_avg ~ 1 + release_year ,~1 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
model = list(
yearly_avg ~ 1 ,~1 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'valence') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1 + release_year)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
pp_check(fit)
pp_check(fit, type = 'scatter')
pp_check(fit, stat = 'mean')
testdat <- song_features_long_all |>
filter(feature == 'valence') |>
select(!feature)
model = list(
yearly_avg ~ 1,~1)
fit = mcp(model, testdat, par_x = "release_year")
plot(fit) + theme_classic() + geom_vline(xintercept = 1991)
pp_check(fit, stat = 'mean')
pp_check(fit, type = 'dens_overlay')
pp_check(fit, type = 'scatter')
model1 = list(yearly_avg ~ 1)
model1 = list(yearly_avg ~ 1,~1)
model3 = list(yearly_avg ~1,`~1,~1)
model1 = list(yearly_avg ~ 1)
model1 = list(yearly_avg ~ 1,yearly_avg ~1)
model3 = list(yearly_avg ~1, yearly_avg ~1, yearly_avg ~1)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 1, yearly_avg ~ 1)
model3 = list(yearly_avg ~ 1, yearly_avg ~ 1, yearly_avg ~ 1)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 1, ~ 1)
model3 = list(yearly_avg ~ 1, ~ 1, ~ 1)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 1, ~ 1)
model3 = list(yearly_avg ~ 1, ~ 1, ~ 1)
fit1 = mcp(model, testdat, par_x = "release_year")
fit2 = mcp(model, testdat, par_x = "release_year")
fit3 = mcp(model, testdat, par_x = "release_year")
loo_compare(fit_0, fit_1, fit_2)  # Lower LOO/WAIC indicates better model
loo_compare(fit_1, fit_2, fit_3)  # Lower LOO/WAIC indicates better model
?loo
install.packages('loo')
install.packages("loo")
loo::loo_compare(fit1, fit2, fit3)
loo::loo_compare(c(fit1, fit2, fit3))  # Lower LOO/WAIC indicates better model
fit1 = mcp(model, testdat, par_x = "release_year")
fit2 = mcp(model, testdat, par_x = "release_year")
fit3 = mcp(model, testdat, par_x = "release_year")
plot(fit1) + theme_classic() + geom_vline(xintercept = 1991)
plot(fit2) + theme_classic() + geom_vline(xintercept = 1991)
fit1 = mcp(model1, testdat, par_x = "release_year")
fit2 = mcp(model2, testdat, par_x = "release_year")
fit3 = mcp(model3, testdat, par_x = "release_year")
plot(fit1) + theme_classic() + geom_vline(xintercept = 1991)
plot(fit2) + theme_classic() + geom_vline(xintercept = 1991)
plot(fit3) + theme_classic() + geom_vline(xintercept = 1991)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 1, ~ 1)
model3 = list(yearly_avg ~ 1, ~ 1, ~ 1)
fit1 = mcp(model1, testdat, par_x = "release_year")
fit2 = mcp(model2, testdat, par_x = "release_year")
fit3 = mcp(model3, testdat, par_x = "release_year")
plot(fit3) + theme_classic() + geom_vline(xintercept = 1991)
plot(fit1) + theme_classic() + geom_vline(xintercept = 1991)
plot(fit2) + theme_classic() + geom_vline(xintercept = 1991)
fit1$loo <- loo(fit1)
fit2$loo <- loo(fit2)
fit3$loo <- loo(fit3)
help('pareto-k-diagnostic')
loo::loo_compare(c(fit1, fit2, fit3))  # Lower LOO/WAIC indicates better model
loo::loo_compare(c(fit1$loo, fit2$loo, fit3$loo))  # Lower LOO/WAIC indicates better model
loo::loo_compare(c(fit1$loo, fit2$loo, fit3$loo))  # Lower LOO/WAIC indicates better model
View(fit1)
loo::loo_compare(fit1$loo, fit2$loo, fit3$loo)  # Lower LOO/WAIC indicates better model
testdat <- song_features_long_all |>
filter(feature == 'acousticness') |>
select(!feature)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 1, ~ 1)
model3 = list(yearly_avg ~ 1, ~ 1, ~ 1)
fit1 = mcp(model1, testdat, par_x = "release_year")
fit2 = mcp(model2, testdat, par_x = "release_year")
fit3 = mcp(model3, testdat, par_x = "release_year")
fit1$loo <- loo(fit1)
fit2$loo <- loo(fit2)
fit3$loo <- loo(fit3)
loo::loo_compare(fit1$loo, fit2$loo, fit3$loo)  # Lower LOO/WAIC indicates better model
plot(fit2) + theme_classic() + geom_vline(xintercept = 1991)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 0 + x)
fit1 = mcp(model1, testdat, par_x = "release_year")
fit2 = mcp(model2, testdat, par_x = "release_year")
model3 = list(yearly_avg ~ 1, 1 ~ 1, 1 ~ 1)
fit3 = mcp(model3, testdat, par_x = "release_year")
fit3$loo <- loo(fit3)
plot(fit3) + theme_classic() + geom_vline(xintercept = 1991)
model1 = list(yearly_avg ~ 1)
model2 = list(yearly_avg ~ 1, 1 ~ 1)
model3 = list(yearly_avg ~ 1, 1 ~ 1, 1 ~ 1)
fit1 = mcp(model1, testdat, par_x = "release_year")
fit2 = mcp(model2, testdat, par_x = "release_year")
fit3 = mcp(model3, testdat, par_x = "release_year")
fit1$loo <- loo(fit1)
fit2$loo <- loo(fit2)
fit3$loo <- loo(fit3)
plot(fit2) + theme_classic() + geom_vline(xintercept = 1991)
loo::loo_compare(fit1$loo, fit2$loo, fit3$loo)  # Lower LOO/WAIC indicates better model
install.packages('segmented')
librry(segmented)
library(segmented)
y<- mu + rnorm(n)*.022
b <- c(-1,rep(c(1.5,-1.5),l=15))
psi <- seq(.1,.9,l=15)
n <- 2000
x <- 1:n/n
X <- cbind(x, outer(x,psi,function(x,y)pmax(x-y,0)))
mu <- drop(tcrossprod(X,t(b)))
set.seed(113)
y<- mu + rnorm(n)*.022
par(mfrow=c(1,2))
y
dat <- cbind(x,y)
View(dat)
ggplot(data = dat, aes(x = x, y = y)) +
geom_point()
o<-selgmented(y, Kmax=20, type='bic', plot.ic=TRUE, check.dslope = FALSE)
plot(o, res=TRUE, col=2, lwd=3)
o<-selgmented(y, Kmax=20, type='aic', plot.ic=TRUE, check.dslope = FALSE)
plot(o, res=TRUE, col=2, lwd=3)
View(testdat)
library(segmented)
segtest<-selgmented(testdat$yearly_avg, Kmax=10, type='aic', plot.ic=TRUE, check.dslope = FALSE)
plot(segtest, res=TRUE, col=2, lwd=3)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
View(testdat)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
testdat <- song_features_long_all |>
filter(feature == 'loudness')
View(testdat)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
select(!feature)
View(testdat)
testdat <- song_features_long_all |>
filter(feature == 'loudness') |>
dplyr::select(!feature)
segtest<-selgmented(testdat$yearly_avg, Kmax=10, type='aic', plot.ic=TRUE, check.dslope = FALSE)
plot(segtest, res=TRUE, col=2, lwd=3)
View(song_features_long_all)
View(song_features_long_era)
View(song_features_long_all)
View(song_features_long_all)
testdatamalg <- song_features_long_all |>
group_by(release_year) |>
summarise(avg_prop = mean(yearly_avg))
View(testdatamalg)
ggplot(data = testdatamalg, x = release_year, y = avg_prop) + geom_point()
ggplot(data = testdatamalg, aes(x = release_year, y = avg_prop)) + geom_point()
segtest<-selgmented(testdatamalg$avg_prop, Kmax=10, type='aic', plot.ic=TRUE, check.dslope = FALSE)
plot(segtest, res=TRUE, col=2, lwd=3)
lm_songs <- lm(avg_prop ~ release_year, data = testdataamalg)
lm_songs <- lm(avg_prop ~ release_year, data = testdatamalg)
seg_model <- segmented(lm_songs, seg.Z = ~release_year, npsi = 2)
summary(seg_model)
plot(testdatamalg$release_year, testdatamalg$avg_value,
pch = 19, col = "gray", xlab = "Release Year", ylab = "Average Value",
main = "Two-Breakpoint Model")
lines(fitted(seg_model), col = "red", lwd = 2)  # Add segmented model fit
points(breakpoints, predict(seg_model, newdata = data.frame(release_year = breakpoints)),
col = "blue", pch = 19)  # Mark breakpoints
breakpoints <- breakpoints(seg_model)$release_year
breakpoints <- seg_model$psi[, "Est."]
print(breakpoints)  #
plot(testdatamalg$release_year, testdatamalg$avg_prop,
pch = 19, col = "gray", xlab = "Release Year", ylab = "Average Value",
main = "Two-Breakpoint Model")
lines(fitted(seg_model), col = "red", lwd = 2)  # Add segmented model fit
points(breakpoints, predict(seg_model, newdata = data.frame(release_year = breakpoints)),
col = "blue", pch = 19)  # Mark breakpoints
testdataamalg$fitted_values <- fitted(seg_model)
testdatamalg$fitted_values <- fitted(seg_model)
ggplot(testdatamalg, aes(x = release_year, y = avg_prop)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +  # Scatterplot of data
geom_line(aes(y = fitted_values), color = "red", size = 1) +  # Segmented model fit
geom_vline(xintercept = breakpoints, linetype = "dashed", color = "blue") +  # Breakpoints
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
ggplot(testdatamalg, aes(x = release_year, y = avg_prop)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +  # Scatterplot of data
geom_line(aes(y = fitted_values), color = "red", size = 1) +  # Segmented model fit
geom_vline(xintercept = breakpoints, linetype = "dashed", color = "blue") +  # Breakpoints
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
ggplot(testdatamalg, aes(x = release_year, y = avg_prop)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +  # Scatterplot of data
geom_line(aes(y = fitted_values), size = 1) +  # Segmented model fit
geom_vline(xintercept = breakpoints, linetype = "dashed", label = release_year) +  # Breakpoints
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
ggplot(testdatamalg, aes(x = release_year, y = avg_prop)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +  # Scatterplot of data
geom_line(aes(y = fitted_values), size = 1) +  # Segmented model fit
geom_vline(xintercept = breakpoints, linetype = "dashed")  +
annotate("text", x=1991, y=0.45, label="1991", angle=90) + # Breakpoints
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
ggplot(testdatamalg, aes(x = release_year, y = avg_prop)) +
geom_point(color = "gray", size = 2, alpha = 0.7) +  # Scatterplot of data
geom_line(aes(y = fitted_values), size = 1) +  # Segmented model fit
geom_vline(xintercept = breakpoints, linetype = "dashed")  +
annotate("text", x=1990, y=0.45, label="1991", angle=90) + # Breakpoints
labs(
title = "Two-Breakpoint Model",
x = "Release Year",
y = "Average Value"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
) +
theme_ipsum_rc()
